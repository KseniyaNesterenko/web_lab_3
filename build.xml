<project name="WebProgrammingLab" default="build" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
    <property file="build.properties"/>
    <available classname="org.apache.ivy.Main" property="ivy.installed"/>
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="ant-contrib-1.0b3.jar" />
        </classpath>
    </taskdef>

    <path id="test.classpath">
        <pathelement path="dist"/>
        <pathelement path="${dir.build.classes}"/>
        <pathelement path="${dir.build.tests}"/>
        <fileset dir="${ant.home}/lib" includes="*.jar" />
    </path>

    <!-- установка Ivy, если нет (done)-->
    <target name="install-ivy" description="Install ivy" unless="ivy.installed">
        <mkdir dir="${user.home}/.ant/lib"/>
        <get dest="${user.home}/.ant/lib/ivy.jar" src="http://search.maven.org/remotecontent?filepath=org/apache/ivy/ivy/2.3.0/ivy-2.3.0.jar"/>
        <fail message="Ivy has been installed. Run the build again"/>
    </target>

    <!-- подгрузка недостающих модулей (done)-->
    <target name="resolve" depends="install-ivy">
        <ivy:resolve />
        <ivy:cachepath pathid="compile.path"/>
    </target>

    <target name="init">
        <mkdir dir="${build}"/>
        <mkdir dir="${dir.build.classes}"/>
        <mkdir dir="${dir.build.tests}"/>
        <mkdir dir="${junit.output.dir}"/>
    </target>

    <!-- Цель для компиляции (done)-->
    <target name="compile" depends="init,resolve">
        <mkdir dir="${dir.build.classes}"/>
        <javac srcdir="${src.main}" destdir="${dir.build.classes}" classpathref="compile.path" includeantruntime="false"/>
    </target>

    <!-- Цель для сборки jar (done)-->
    <target name="create-jar" depends="compile">
        <jar destfile="${jar.file}" basedir="${dir.build.classes}">
            <manifest>
                <attribute name="Main-Class" value="${main.class}"/>
                <attribute name="Version" value="${version}"/>
            </manifest>
        </jar>
    </target>

    <!-- Цель для сборки war (done)-->
    <target name="create-war" depends="compile">
        <war destfile="${war.file}" webxml="${webInf.dir}/web.xml">
            <fileset dir="${dir.build.classes}" includes="**/*"/>
        </war>
    </target>

    <!-- Сборка jar и war (done) -->
    <target name="build" depends="create-jar, create-war"/>

    <!-- Запуск Jar-файла (done) -->
    <target name="run" depends="build">
        <java jar="${jar.file}" fork="true"/>
    </target>

    <!-- Цель для очистки проекта (done) -->
    <target name="clean">
        <delete dir="${build}"/>
        <delete dir="${dir.dist}"/>
    </target>

    <!-- Цель для компиляции тестов (done)-->
    <target name="compile-tests" depends="build">
        <javac srcdir="${dir.src.test}" destdir="${dir.build.classes}" classpathref="compile.path" includeantruntime="false"/>
    </target>

    <!-- Цель для тестирования (done)-->
    <target name="test" depends="compile-tests">
        <junitlauncher>
            <classpath>
                <pathelement path="${dir.build.classes}"/>
                <pathelement path="${dir.build.tests}"/>
                <fileset dir="${ant.home}/lib" includes="*.jar" />
                <path refid="compile.path" />
                <path refid="test.classpath" />
            </classpath>
            <testclasses outputdir="${junit.output.dir}">
                <fileset dir="${dir.build.classes}"/>
                <fileset dir="${dir.build.tests}">
                    <include name="**/*.class"/>
                </fileset>
                <listener type="legacy-brief" sendSysOut="true"/>
                <listener type="legacy-xml" sendSysErr="true" sendSysOut="true"/>
                <fork />
            </testclasses>
        </junitlauncher>
    </target>

    <!-- Цель для преобразования файлов локализации (done)-->
    <target name="native2ascii">
        <native2ascii encoding="UTF-8" src="${dir.src}" dest="${build}" includes="**/*.properties" />
    </target>

    <!-- Цель для валидации XML файлов (done) -->
    <target name="validate-xml" depends="init">
        <xmlvalidate failonerror="no" lenient="false">
            <fileset dir="${dir.src}" includes="**/*.xml" />
        </xmlvalidate>
    </target>

    <!-- Цель для перемещения собранного проекта по scp (done)-->
    <target name="scp" depends="build">
        <exec executable="scp" failonerror="true" outputproperty="scp.output">
            <arg value="-P"/>
            <arg value="${scp.port}"/>
            <arg value="${war.file}"/>
            <arg value="${scp.user}@${scp.host}:~/${scp.dir}"/>
        </exec>
        <echo message="Project successfully deployed to Helios!"/>
    </target>

    <!-- Цель для взаимодействия с svn (done)-->
    <target name="team" depends="build">

        <exec executable="git" failonerror="false">
            <arg line="branch"/>
            <arg line="-D"/>
            <arg line="rev1"/>
        </exec>

        <exec executable="git" failonerror="false">
            <arg line="branch"/>
            <arg line="-D"/>
            <arg line="rev2"/>
        </exec>

        <exec executable="git">
            <arg line="branch"/>
            <arg line="rev1"/>
            <arg line="HEAD~1"/>
        </exec>

        <exec executable="git">
            <arg line="checkout"/>
            <arg line="rev1"/>
        </exec>

        <exec executable="git">
            <arg line="clone"/>
            <arg line="--branch"/>
            <arg line="rev1"/>
            <arg line="--single-branch"/>
            <arg line="."/>
            <arg line="${dir.build.team}/rev1"/>
        </exec>

        <antcall target="build">
            <param name="dir.src" value="${dir.build.team}/rev1"/>
            <param name="jar.file" value="${dir.build.team}/rev1.jar"/>
            <param name="build" value="${dir.build.team}"/>
        </antcall>

        <exec executable="git">
            <arg line="branch"/>
            <arg line="rev2"/>
            <arg line="HEAD~2"/>
        </exec>

        <exec executable="git">
            <arg line="checkout"/>
            <arg line="rev2"/>
        </exec>

        <exec executable="git">
            <arg line="clone"/>
            <arg line="--branch"/>
            <arg line="rev2"/>
            <arg line="--single-branch"/>
            <arg line="."/>
            <arg line="${dir.build.team}/rev2"/>
        </exec>

        <antcall target="build">
            <param name="dir.src" value="${dir.build.team}/rev2"/>
            <param name="jar.file" value="${dir.build.team}/rev2.jar"/>
            <param name="build" value="${dir.build.team}"/>
        </antcall>

<!--        <exec executable="git">-->
<!--            <arg line="checkout"/>-->
<!--            <arg line="HEAD-2"/>-->
<!--            <arg line="${dir.build.team}/revision2"/>-->
<!--        </exec>-->

<!--        <antcall target="build">-->
<!--            <param name="dir.src" value="${dir.build.team}/revision2"/>-->
<!--            <param name="jar.file" value="${dir.build.team}/revision2.jar"/>-->
<!--            <param name="build" value="${dir.build.team}"/>-->
<!--        </antcall>-->

        <zip destfile="${zip.file}">
            <fileset dir="${dir.build.team}" includes="**/*.jar"/>
        </zip>

        <exec executable="git">
            <arg line="checkout"/>
            <arg line="main"/>
        </exec>
    </target>

    <!-- Цель для определения измененных файлов (done)-->
    <target name="diff">
        <exec executable="svn" outputproperty="diff">
            <arg line="status"/>
        </exec>
        <for param="name" list="${svn.names}" delimiter=" ">
            <sequential>
                <condition property="check">
                    <contains string="${diff}" substring="@{name}.java"/>
                </condition>
            </sequential>
        </for>
        <antcall target="commit"/>
    </target>

    <!-- Цель для коммита изменений (done)-->
    <target name="commit" if="${check}">
        <exec executable="svn">
            <arg line="add"/>
            <arg value="*"/>
            <arg value="--force"/>
        </exec>

        <exec executable="svn">
            <arg line="commit"/>
            <arg line="-m 'auto commit'"/>
        </exec>
    </target>

    <!-- Задача для добавления и коммита отчета в Git (done)-->
    <target name="report" depends="test">
        <mkdir dir="${junit.output.dir}"/>

        <!-- Добавить отчетов JUnit в Git -->
        <exec executable="git">
            <arg value="add"/>
            <arg value="${junit.output.dir}/TEST-*.xml"/>
        </exec>

        <!-- Коммит -->
        <exec executable="git">
            <arg value="commit"/>
            <arg value="-m"/>
            <arg value="Отчёт тестов JUnit"/>
        </exec>
    </target>
</project>