<project name="WebProgrammingLab" default="build" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
    <property file="build.properties"/>
    <available classname="org.apache.ivy.Main" property="ivy.installed"/>

    <path id="test.classpath">
        <pathelement path="dist"/>
        <pathelement path="${dir.build.classes}"/>
        <pathelement path="${dir.build.tests}"/>
        <fileset dir="${ant.home}/lib" includes="*.jar" />
    </path>

    <!-- установка Ivy, если нет (done)-->
    <target name="install-ivy" description="Install ivy" unless="ivy.installed">
        <mkdir dir="${user.home}/.ant/lib"/>
        <get dest="${user.home}/.ant/lib/ivy.jar" src="http://search.maven.org/remotecontent?filepath=org/apache/ivy/ivy/2.3.0/ivy-2.3.0.jar"/>
        <fail message="Ivy has been installed. Run the build again"/>
    </target>

    <!-- подгрузка недостающих модулей (done)-->
    <target name="resolve" depends="install-ivy">
        <ivy:resolve />
        <ivy:cachepath pathid="compile.path"/>
    </target>

    <target name="init">
        <mkdir dir="${build}"/>
        <mkdir dir="${dir.build.classes}"/>
        <mkdir dir="${dir.dist}"/>
        <mkdir dir="${dir.lib}"/>
    </target>

    <!-- Цель для компиляции (done)-->
    <target name="compile" depends="init,resolve">
        <mkdir dir="${dir.build.classes}"/>
        <javac srcdir="${src.main}" destdir="${dir.build.classes}" classpathref="compile.path" includeantruntime="false"/>
    </target>

    <!-- Цель для сборки jar (done)-->
    <target name="create-jar" depends="compile">
        <jar destfile="${jar.file}" basedir="${dir.build.classes}">
            <manifest>
                <attribute name="Main-Class" value="${main.class}"/>
                <attribute name="Version" value="${version}"/>
            </manifest>
        </jar>
    </target>

    <!-- Цель для сборки war (done)-->
    <target name="create-war" depends="compile">
        <war destfile="${war.file}" webxml="${webInf.dir}/web.xml">
            <fileset dir="${dir.build.classes}" includes="**/*"/>
            <lib dir="${dir.lib}"/>
        </war>
    </target>

    <!-- Сборка jar и war (done) -->
    <target name="build" depends="create-jar, create-war"/>

    <!-- Запуск Jar-файла (done) -->
    <target name="run" depends="build">
        <java jar="${jar.file}" fork="true"/>
    </target>

    <!-- Цель для очистки проекта (done) -->
    <target name="clean">
        <delete dir="${build}"/>
        <delete dir="${dir.dist}"/>
    </target>

    <!-- Цель для компиляции тестов (done)-->
    <target name="compile-tests" depends="init,resolve">
        <javac srcdir="${dir.src.test}" destdir="${dir.build.classes}" classpathref="compile.path" includeantruntime="false"/>
    </target>

    <!-- Цель для тестирования (todo: не работает)-->
<!--    <target name="test" depends="build, compile-tests">-->
<!--        <mkdir dir="${junit.output.dir}"/>-->
<!--        <junit printsummary="yes" haltonfailure="yes" showoutput="yes">-->
<!--            <formatter type="xml"/>-->
<!--            <classpath>-->
<!--                <pathelement location="${jar.file}"/>-->
<!--                <pathelement location="${junit.jar}"/>-->
<!--            </classpath>-->
<!--            <batchtest todir="${junit.output.dir}" fork="yes">-->
<!--                <fileset dir="${dir.src.test}">-->
<!--                    <include name="**/*Test*.java"/>-->
<!--                </fileset>-->
<!--            </batchtest>-->
<!--        </junit>-->
<!--    </target>-->

    <target name="test" depends="compile-tests">
        <junitlauncher>
            <classpath>
                <pathelement path="${dir.build.classes}"/>
                <pathelement path="${dir.build.tests}"/>
                <fileset dir="${ant.home}/lib" includes="*.jar" />
                <path refid="compile.path" />
                <path refid="test.classpath" />
            </classpath>
            <testclasses outputdir="${junit.output.dir}">
                <fileset dir="${dir.build.classes}"/>
                <fileset dir="${dir.build.tests}">
                    <include name="**/*.class"/>
                </fileset>
                <listener type="legacy-brief" sendSysOut="true"/>
                <listener type="legacy-xml" sendSysErr="true" sendSysOut="true"/>
                <fork />
            </testclasses>
        </junitlauncher>
    </target>

    <!-- Цель для преобразования файлов локализации (todo: мб добавить какие-то строки для локализации)-->
    <target name="native2ascii">
        <native2ascii encoding="UTF-8" src="${dir.src}" dest="${build}" includes="**/*.properties" />
    </target>

    <!-- Цель для валидации XML файлов (done) -->
    <target name="validate-xml" depends="init">
        <xmlvalidate failonerror="no" lenient="false">
            <fileset dir="${dir.src}" includes="**/*.xml" />
        </xmlvalidate>
    </target>

    <!-- Цель для перемещения собранного проекта по scp (todo: посмотреть пример команды на гелиос и написать аргументы по аналогии)-->
    <target name="scp" depends="build">
        <exec executable="scp" failonerror="true">
            <arg value="-r"/>
            <arg value="${build}/${jar.file}"/>
            <arg value="${remote.username}@${remote.host}:${remote.dir}"/>
        </exec>
    </target>

    <!-- Цель для взаимодействия с svn (todo: протестировать)-->
    <target name="team" depends="build">
        <svn>
            <checkout url="${svn.url}" revision="${revision1}" destPath="revision1"/>
            <checkout url="${svn.url}" revision="${revision2}" destPath="revision2"/>
        </svn>

        <antcall target="build">
            <param name="dir.src" value="revision1"/>
        </antcall>
        <antcall target="build">
            <param name="dir.src" value="revision2"/>
        </antcall>

        <zip destfile="${zip.file}">
            <fileset dir="${dir.build}" includes="*.jar"/>
        </zip>
    </target>

    <!-- Цель для определения измененных файлов (todo: протестировать)-->
    <target name="check-changes">
        <exec executable="svn">
            <arg line="status -q" />
            <redirector>
                <outputfilterchain>
                    <!-- Фильтр для получения только имен измененных файлов -->
                    <linecontains>
                        <contains value="M" />
                    </linecontains>
                    <propertyref name="${changed.files.property}" />
                </outputfilterchain>
            </redirector>
        </exec>
    </target>

    <!-- Цель для коммита изменений (todo: протестировать)-->
    <target name="commit" depends="check-changes">
        <svn>
            <commit
                    svnpath="${svn.executable}"
                    username="${svn.username}"
                    password="${svn.password}"
                    message="${commit.message}"
                    failonerror="true">
                <fileset dir="${basedir}" includes="${changed.files}" />
            </commit>
        </svn>
    </target>

    <!-- Задача для добавления и коммита отчета в Git (todo: протестировать)-->
    <target name="commit-report" depends="test">
        <exec executable="${git.executable}">
            <arg value="add" />
            <arg value="${junit.report.file}" />
        </exec>

        <exec executable="${git.executable}">
            <arg value="commit" />
            <arg value="-m" />
            <arg value="${commit.message}" />
        </exec>
    </target>

</project>
